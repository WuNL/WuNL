// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hvs.proto

#ifndef PROTOBUF_hvs_2eproto__INCLUDED
#define PROTOBUF_hvs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace hvs {
class ChannelPolling;
class ChannelPollingDefaultTypeInternal;
extern ChannelPollingDefaultTypeInternal _ChannelPolling_default_instance_;
class Terminal;
class TerminalDefaultTypeInternal;
extern TerminalDefaultTypeInternal _Terminal_default_instance_;
class TerminalArray;
class TerminalArrayDefaultTypeInternal;
extern TerminalArrayDefaultTypeInternal _TerminalArray_default_instance_;
class WrapperMessage;
class WrapperMessageDefaultTypeInternal;
extern WrapperMessageDefaultTypeInternal _WrapperMessage_default_instance_;
}  // namespace hvs

namespace hvs {

namespace protobuf_hvs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_hvs_2eproto

// ===================================================================

class Terminal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hvs.Terminal) */ {
 public:
  Terminal();
  virtual ~Terminal();

  Terminal(const Terminal& from);

  inline Terminal& operator=(const Terminal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Terminal(Terminal&& from) noexcept
    : Terminal() {
    *this = ::std::move(from);
  }

  inline Terminal& operator=(Terminal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Terminal& default_instance();

  static inline const Terminal* internal_default_instance() {
    return reinterpret_cast<const Terminal*>(
               &_Terminal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Terminal* other);
  friend void swap(Terminal& a, Terminal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Terminal* New() const PROTOBUF_FINAL { return New(NULL); }

  Terminal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Terminal& from);
  void MergeFrom(const Terminal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Terminal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool tstatus = 4;
  void clear_tstatus();
  static const int kTstatusFieldNumber = 4;
  bool tstatus() const;
  void set_tstatus(bool value);

  // @@protoc_insertion_point(class_scope:hvs.Terminal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  bool tstatus_;
  mutable int _cached_size_;
  friend struct protobuf_hvs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TerminalArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hvs.TerminalArray) */ {
 public:
  TerminalArray();
  virtual ~TerminalArray();

  TerminalArray(const TerminalArray& from);

  inline TerminalArray& operator=(const TerminalArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TerminalArray(TerminalArray&& from) noexcept
    : TerminalArray() {
    *this = ::std::move(from);
  }

  inline TerminalArray& operator=(TerminalArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TerminalArray& default_instance();

  static inline const TerminalArray* internal_default_instance() {
    return reinterpret_cast<const TerminalArray*>(
               &_TerminalArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TerminalArray* other);
  friend void swap(TerminalArray& a, TerminalArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TerminalArray* New() const PROTOBUF_FINAL { return New(NULL); }

  TerminalArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TerminalArray& from);
  void MergeFrom(const TerminalArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TerminalArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hvs.Terminal terminal = 1;
  int terminal_size() const;
  void clear_terminal();
  static const int kTerminalFieldNumber = 1;
  const ::hvs::Terminal& terminal(int index) const;
  ::hvs::Terminal* mutable_terminal(int index);
  ::hvs::Terminal* add_terminal();
  ::google::protobuf::RepeatedPtrField< ::hvs::Terminal >*
      mutable_terminal();
  const ::google::protobuf::RepeatedPtrField< ::hvs::Terminal >&
      terminal() const;

  // @@protoc_insertion_point(class_scope:hvs.TerminalArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::hvs::Terminal > terminal_;
  mutable int _cached_size_;
  friend struct protobuf_hvs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelPolling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hvs.ChannelPolling) */ {
 public:
  ChannelPolling();
  virtual ~ChannelPolling();

  ChannelPolling(const ChannelPolling& from);

  inline ChannelPolling& operator=(const ChannelPolling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelPolling(ChannelPolling&& from) noexcept
    : ChannelPolling() {
    *this = ::std::move(from);
  }

  inline ChannelPolling& operator=(ChannelPolling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelPolling& default_instance();

  static inline const ChannelPolling* internal_default_instance() {
    return reinterpret_cast<const ChannelPolling*>(
               &_ChannelPolling_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ChannelPolling* other);
  friend void swap(ChannelPolling& a, ChannelPolling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelPolling* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelPolling* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelPolling& from);
  void MergeFrom(const ChannelPolling& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelPolling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string terminalID = 6;
  void clear_terminalid();
  static const int kTerminalIDFieldNumber = 6;
  const ::std::string& terminalid() const;
  void set_terminalid(const ::std::string& value);
  #if LANG_CXX11
  void set_terminalid(::std::string&& value);
  #endif
  void set_terminalid(const char* value);
  void set_terminalid(const char* value, size_t size);
  ::std::string* mutable_terminalid();
  ::std::string* release_terminalid();
  void set_allocated_terminalid(::std::string* terminalid);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 saperateNumber = 2;
  void clear_saperatenumber();
  static const int kSaperateNumberFieldNumber = 2;
  ::google::protobuf::int32 saperatenumber() const;
  void set_saperatenumber(::google::protobuf::int32 value);

  // int32 style = 3;
  void clear_style();
  static const int kStyleFieldNumber = 3;
  ::google::protobuf::int32 style() const;
  void set_style(::google::protobuf::int32 value);

  // int32 pollingTime = 4;
  void clear_pollingtime();
  static const int kPollingTimeFieldNumber = 4;
  ::google::protobuf::int32 pollingtime() const;
  void set_pollingtime(::google::protobuf::int32 value);

  // bool isPolling = 5;
  void clear_ispolling();
  static const int kIsPollingFieldNumber = 5;
  bool ispolling() const;
  void set_ispolling(bool value);

  // @@protoc_insertion_point(class_scope:hvs.ChannelPolling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr terminalid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 saperatenumber_;
  ::google::protobuf::int32 style_;
  ::google::protobuf::int32 pollingtime_;
  bool ispolling_;
  mutable int _cached_size_;
  friend struct protobuf_hvs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WrapperMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hvs.WrapperMessage) */ {
 public:
  WrapperMessage();
  virtual ~WrapperMessage();

  WrapperMessage(const WrapperMessage& from);

  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WrapperMessage(WrapperMessage&& from) noexcept
    : WrapperMessage() {
    *this = ::std::move(from);
  }

  inline WrapperMessage& operator=(WrapperMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WrapperMessage& default_instance();

  enum MsgCase {
    kCpl = 3,
    kTa = 4,
    kTml = 5,
    kDebugStatus = 6,
    kPacketGrepperStatus = 7,
    MSG_NOT_SET = 0,
  };

  static inline const WrapperMessage* internal_default_instance() {
    return reinterpret_cast<const WrapperMessage*>(
               &_WrapperMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WrapperMessage* other);
  friend void swap(WrapperMessage& a, WrapperMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WrapperMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  WrapperMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WrapperMessage& from);
  void MergeFrom(const WrapperMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WrapperMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .hvs.ChannelPolling cpl = 3;
  bool has_cpl() const;
  void clear_cpl();
  static const int kCplFieldNumber = 3;
  const ::hvs::ChannelPolling& cpl() const;
  ::hvs::ChannelPolling* mutable_cpl();
  ::hvs::ChannelPolling* release_cpl();
  void set_allocated_cpl(::hvs::ChannelPolling* cpl);

  // .hvs.TerminalArray ta = 4;
  bool has_ta() const;
  void clear_ta();
  static const int kTaFieldNumber = 4;
  const ::hvs::TerminalArray& ta() const;
  ::hvs::TerminalArray* mutable_ta();
  ::hvs::TerminalArray* release_ta();
  void set_allocated_ta(::hvs::TerminalArray* ta);

  // .hvs.Terminal tml = 5;
  bool has_tml() const;
  void clear_tml();
  static const int kTmlFieldNumber = 5;
  const ::hvs::Terminal& tml() const;
  ::hvs::Terminal* mutable_tml();
  ::hvs::Terminal* release_tml();
  void set_allocated_tml(::hvs::Terminal* tml);

  // int64 debugStatus = 6;
  private:
  bool has_debugstatus() const;
  public:
  void clear_debugstatus();
  static const int kDebugStatusFieldNumber = 6;
  ::google::protobuf::int64 debugstatus() const;
  void set_debugstatus(::google::protobuf::int64 value);

  // int64 packetGrepperStatus = 7;
  private:
  bool has_packetgrepperstatus() const;
  public:
  void clear_packetgrepperstatus();
  static const int kPacketGrepperStatusFieldNumber = 7;
  ::google::protobuf::int64 packetgrepperstatus() const;
  void set_packetgrepperstatus(::google::protobuf::int64 value);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:hvs.WrapperMessage)
 private:
  void set_has_cpl();
  void set_has_ta();
  void set_has_tml();
  void set_has_debugstatus();
  void set_has_packetgrepperstatus();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MsgUnion {
    MsgUnion() {}
    ::hvs::ChannelPolling* cpl_;
    ::hvs::TerminalArray* ta_;
    ::hvs::Terminal* tml_;
    ::google::protobuf::int64 debugstatus_;
    ::google::protobuf::int64 packetgrepperstatus_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_hvs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Terminal

// int32 id = 1;
inline void Terminal::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Terminal::id() const {
  // @@protoc_insertion_point(field_get:hvs.Terminal.id)
  return id_;
}
inline void Terminal::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hvs.Terminal.id)
}

// string ip = 2;
inline void Terminal::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Terminal::ip() const {
  // @@protoc_insertion_point(field_get:hvs.Terminal.ip)
  return ip_.GetNoArena();
}
inline void Terminal::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hvs.Terminal.ip)
}
#if LANG_CXX11
inline void Terminal::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hvs.Terminal.ip)
}
#endif
inline void Terminal::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hvs.Terminal.ip)
}
inline void Terminal::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hvs.Terminal.ip)
}
inline ::std::string* Terminal::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:hvs.Terminal.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Terminal::release_ip() {
  // @@protoc_insertion_point(field_release:hvs.Terminal.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Terminal::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:hvs.Terminal.ip)
}

// string name = 3;
inline void Terminal::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Terminal::name() const {
  // @@protoc_insertion_point(field_get:hvs.Terminal.name)
  return name_.GetNoArena();
}
inline void Terminal::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hvs.Terminal.name)
}
#if LANG_CXX11
inline void Terminal::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hvs.Terminal.name)
}
#endif
inline void Terminal::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hvs.Terminal.name)
}
inline void Terminal::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hvs.Terminal.name)
}
inline ::std::string* Terminal::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:hvs.Terminal.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Terminal::release_name() {
  // @@protoc_insertion_point(field_release:hvs.Terminal.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Terminal::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hvs.Terminal.name)
}

// bool tstatus = 4;
inline void Terminal::clear_tstatus() {
  tstatus_ = false;
}
inline bool Terminal::tstatus() const {
  // @@protoc_insertion_point(field_get:hvs.Terminal.tstatus)
  return tstatus_;
}
inline void Terminal::set_tstatus(bool value) {
  
  tstatus_ = value;
  // @@protoc_insertion_point(field_set:hvs.Terminal.tstatus)
}

// -------------------------------------------------------------------

// TerminalArray

// repeated .hvs.Terminal terminal = 1;
inline int TerminalArray::terminal_size() const {
  return terminal_.size();
}
inline void TerminalArray::clear_terminal() {
  terminal_.Clear();
}
inline const ::hvs::Terminal& TerminalArray::terminal(int index) const {
  // @@protoc_insertion_point(field_get:hvs.TerminalArray.terminal)
  return terminal_.Get(index);
}
inline ::hvs::Terminal* TerminalArray::mutable_terminal(int index) {
  // @@protoc_insertion_point(field_mutable:hvs.TerminalArray.terminal)
  return terminal_.Mutable(index);
}
inline ::hvs::Terminal* TerminalArray::add_terminal() {
  // @@protoc_insertion_point(field_add:hvs.TerminalArray.terminal)
  return terminal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hvs::Terminal >*
TerminalArray::mutable_terminal() {
  // @@protoc_insertion_point(field_mutable_list:hvs.TerminalArray.terminal)
  return &terminal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hvs::Terminal >&
TerminalArray::terminal() const {
  // @@protoc_insertion_point(field_list:hvs.TerminalArray.terminal)
  return terminal_;
}

// -------------------------------------------------------------------

// ChannelPolling

// int32 id = 1;
inline void ChannelPolling::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ChannelPolling::id() const {
  // @@protoc_insertion_point(field_get:hvs.ChannelPolling.id)
  return id_;
}
inline void ChannelPolling::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hvs.ChannelPolling.id)
}

// int32 saperateNumber = 2;
inline void ChannelPolling::clear_saperatenumber() {
  saperatenumber_ = 0;
}
inline ::google::protobuf::int32 ChannelPolling::saperatenumber() const {
  // @@protoc_insertion_point(field_get:hvs.ChannelPolling.saperateNumber)
  return saperatenumber_;
}
inline void ChannelPolling::set_saperatenumber(::google::protobuf::int32 value) {
  
  saperatenumber_ = value;
  // @@protoc_insertion_point(field_set:hvs.ChannelPolling.saperateNumber)
}

// int32 style = 3;
inline void ChannelPolling::clear_style() {
  style_ = 0;
}
inline ::google::protobuf::int32 ChannelPolling::style() const {
  // @@protoc_insertion_point(field_get:hvs.ChannelPolling.style)
  return style_;
}
inline void ChannelPolling::set_style(::google::protobuf::int32 value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:hvs.ChannelPolling.style)
}

// int32 pollingTime = 4;
inline void ChannelPolling::clear_pollingtime() {
  pollingtime_ = 0;
}
inline ::google::protobuf::int32 ChannelPolling::pollingtime() const {
  // @@protoc_insertion_point(field_get:hvs.ChannelPolling.pollingTime)
  return pollingtime_;
}
inline void ChannelPolling::set_pollingtime(::google::protobuf::int32 value) {
  
  pollingtime_ = value;
  // @@protoc_insertion_point(field_set:hvs.ChannelPolling.pollingTime)
}

// bool isPolling = 5;
inline void ChannelPolling::clear_ispolling() {
  ispolling_ = false;
}
inline bool ChannelPolling::ispolling() const {
  // @@protoc_insertion_point(field_get:hvs.ChannelPolling.isPolling)
  return ispolling_;
}
inline void ChannelPolling::set_ispolling(bool value) {
  
  ispolling_ = value;
  // @@protoc_insertion_point(field_set:hvs.ChannelPolling.isPolling)
}

// string terminalID = 6;
inline void ChannelPolling::clear_terminalid() {
  terminalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelPolling::terminalid() const {
  // @@protoc_insertion_point(field_get:hvs.ChannelPolling.terminalID)
  return terminalid_.GetNoArena();
}
inline void ChannelPolling::set_terminalid(const ::std::string& value) {
  
  terminalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hvs.ChannelPolling.terminalID)
}
#if LANG_CXX11
inline void ChannelPolling::set_terminalid(::std::string&& value) {
  
  terminalid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hvs.ChannelPolling.terminalID)
}
#endif
inline void ChannelPolling::set_terminalid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  terminalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hvs.ChannelPolling.terminalID)
}
inline void ChannelPolling::set_terminalid(const char* value, size_t size) {
  
  terminalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hvs.ChannelPolling.terminalID)
}
inline ::std::string* ChannelPolling::mutable_terminalid() {
  
  // @@protoc_insertion_point(field_mutable:hvs.ChannelPolling.terminalID)
  return terminalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelPolling::release_terminalid() {
  // @@protoc_insertion_point(field_release:hvs.ChannelPolling.terminalID)
  
  return terminalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelPolling::set_allocated_terminalid(::std::string* terminalid) {
  if (terminalid != NULL) {
    
  } else {
    
  }
  terminalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), terminalid);
  // @@protoc_insertion_point(field_set_allocated:hvs.ChannelPolling.terminalID)
}

// -------------------------------------------------------------------

// WrapperMessage

// .hvs.ChannelPolling cpl = 3;
inline bool WrapperMessage::has_cpl() const {
  return msg_case() == kCpl;
}
inline void WrapperMessage::set_has_cpl() {
  _oneof_case_[0] = kCpl;
}
inline void WrapperMessage::clear_cpl() {
  if (has_cpl()) {
    delete msg_.cpl_;
    clear_has_msg();
  }
}
inline  const ::hvs::ChannelPolling& WrapperMessage::cpl() const {
  // @@protoc_insertion_point(field_get:hvs.WrapperMessage.cpl)
  return has_cpl()
      ? *msg_.cpl_
      : ::hvs::ChannelPolling::default_instance();
}
inline ::hvs::ChannelPolling* WrapperMessage::mutable_cpl() {
  if (!has_cpl()) {
    clear_msg();
    set_has_cpl();
    msg_.cpl_ = new ::hvs::ChannelPolling;
  }
  // @@protoc_insertion_point(field_mutable:hvs.WrapperMessage.cpl)
  return msg_.cpl_;
}
inline ::hvs::ChannelPolling* WrapperMessage::release_cpl() {
  // @@protoc_insertion_point(field_release:hvs.WrapperMessage.cpl)
  if (has_cpl()) {
    clear_has_msg();
    ::hvs::ChannelPolling* temp = msg_.cpl_;
    msg_.cpl_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void WrapperMessage::set_allocated_cpl(::hvs::ChannelPolling* cpl) {
  clear_msg();
  if (cpl) {
    set_has_cpl();
    msg_.cpl_ = cpl;
  }
  // @@protoc_insertion_point(field_set_allocated:hvs.WrapperMessage.cpl)
}

// .hvs.TerminalArray ta = 4;
inline bool WrapperMessage::has_ta() const {
  return msg_case() == kTa;
}
inline void WrapperMessage::set_has_ta() {
  _oneof_case_[0] = kTa;
}
inline void WrapperMessage::clear_ta() {
  if (has_ta()) {
    delete msg_.ta_;
    clear_has_msg();
  }
}
inline  const ::hvs::TerminalArray& WrapperMessage::ta() const {
  // @@protoc_insertion_point(field_get:hvs.WrapperMessage.ta)
  return has_ta()
      ? *msg_.ta_
      : ::hvs::TerminalArray::default_instance();
}
inline ::hvs::TerminalArray* WrapperMessage::mutable_ta() {
  if (!has_ta()) {
    clear_msg();
    set_has_ta();
    msg_.ta_ = new ::hvs::TerminalArray;
  }
  // @@protoc_insertion_point(field_mutable:hvs.WrapperMessage.ta)
  return msg_.ta_;
}
inline ::hvs::TerminalArray* WrapperMessage::release_ta() {
  // @@protoc_insertion_point(field_release:hvs.WrapperMessage.ta)
  if (has_ta()) {
    clear_has_msg();
    ::hvs::TerminalArray* temp = msg_.ta_;
    msg_.ta_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void WrapperMessage::set_allocated_ta(::hvs::TerminalArray* ta) {
  clear_msg();
  if (ta) {
    set_has_ta();
    msg_.ta_ = ta;
  }
  // @@protoc_insertion_point(field_set_allocated:hvs.WrapperMessage.ta)
}

// .hvs.Terminal tml = 5;
inline bool WrapperMessage::has_tml() const {
  return msg_case() == kTml;
}
inline void WrapperMessage::set_has_tml() {
  _oneof_case_[0] = kTml;
}
inline void WrapperMessage::clear_tml() {
  if (has_tml()) {
    delete msg_.tml_;
    clear_has_msg();
  }
}
inline  const ::hvs::Terminal& WrapperMessage::tml() const {
  // @@protoc_insertion_point(field_get:hvs.WrapperMessage.tml)
  return has_tml()
      ? *msg_.tml_
      : ::hvs::Terminal::default_instance();
}
inline ::hvs::Terminal* WrapperMessage::mutable_tml() {
  if (!has_tml()) {
    clear_msg();
    set_has_tml();
    msg_.tml_ = new ::hvs::Terminal;
  }
  // @@protoc_insertion_point(field_mutable:hvs.WrapperMessage.tml)
  return msg_.tml_;
}
inline ::hvs::Terminal* WrapperMessage::release_tml() {
  // @@protoc_insertion_point(field_release:hvs.WrapperMessage.tml)
  if (has_tml()) {
    clear_has_msg();
    ::hvs::Terminal* temp = msg_.tml_;
    msg_.tml_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void WrapperMessage::set_allocated_tml(::hvs::Terminal* tml) {
  clear_msg();
  if (tml) {
    set_has_tml();
    msg_.tml_ = tml;
  }
  // @@protoc_insertion_point(field_set_allocated:hvs.WrapperMessage.tml)
}

// int64 debugStatus = 6;
inline bool WrapperMessage::has_debugstatus() const {
  return msg_case() == kDebugStatus;
}
inline void WrapperMessage::set_has_debugstatus() {
  _oneof_case_[0] = kDebugStatus;
}
inline void WrapperMessage::clear_debugstatus() {
  if (has_debugstatus()) {
    msg_.debugstatus_ = GOOGLE_LONGLONG(0);
    clear_has_msg();
  }
}
inline ::google::protobuf::int64 WrapperMessage::debugstatus() const {
  // @@protoc_insertion_point(field_get:hvs.WrapperMessage.debugStatus)
  if (has_debugstatus()) {
    return msg_.debugstatus_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void WrapperMessage::set_debugstatus(::google::protobuf::int64 value) {
  if (!has_debugstatus()) {
    clear_msg();
    set_has_debugstatus();
  }
  msg_.debugstatus_ = value;
  // @@protoc_insertion_point(field_set:hvs.WrapperMessage.debugStatus)
}

// int64 packetGrepperStatus = 7;
inline bool WrapperMessage::has_packetgrepperstatus() const {
  return msg_case() == kPacketGrepperStatus;
}
inline void WrapperMessage::set_has_packetgrepperstatus() {
  _oneof_case_[0] = kPacketGrepperStatus;
}
inline void WrapperMessage::clear_packetgrepperstatus() {
  if (has_packetgrepperstatus()) {
    msg_.packetgrepperstatus_ = GOOGLE_LONGLONG(0);
    clear_has_msg();
  }
}
inline ::google::protobuf::int64 WrapperMessage::packetgrepperstatus() const {
  // @@protoc_insertion_point(field_get:hvs.WrapperMessage.packetGrepperStatus)
  if (has_packetgrepperstatus()) {
    return msg_.packetgrepperstatus_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void WrapperMessage::set_packetgrepperstatus(::google::protobuf::int64 value) {
  if (!has_packetgrepperstatus()) {
    clear_msg();
    set_has_packetgrepperstatus();
  }
  msg_.packetgrepperstatus_ = value;
  // @@protoc_insertion_point(field_set:hvs.WrapperMessage.packetGrepperStatus)
}

inline bool WrapperMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void WrapperMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline WrapperMessage::MsgCase WrapperMessage::msg_case() const {
  return WrapperMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace hvs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hvs_2eproto__INCLUDED
