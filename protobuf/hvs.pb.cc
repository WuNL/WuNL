// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hvs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hvs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hvs
{
class TerminalDefaultTypeInternal
{
public:
    ::google::protobuf::internal::ExplicitlyConstructed<Terminal>
    _instance;
} _Terminal_default_instance_;
class TerminalArrayDefaultTypeInternal
{
public:
    ::google::protobuf::internal::ExplicitlyConstructed<TerminalArray>
    _instance;
} _TerminalArray_default_instance_;
class ChannelPollingDefaultTypeInternal
{
public:
    ::google::protobuf::internal::ExplicitlyConstructed<ChannelPolling>
    _instance;
} _ChannelPolling_default_instance_;
class WrapperMessageDefaultTypeInternal
{
public:
    ::google::protobuf::internal::ExplicitlyConstructed<WrapperMessage>
    _instance;
    const ::hvs::ChannelPolling* cpl_;
    const ::hvs::TerminalArray* ta_;
    const ::hvs::Terminal* tml_;
    ::google::protobuf::int64 debugstatus_;
    ::google::protobuf::int64 packetgrepperstatus_;
} _WrapperMessage_default_instance_;

namespace protobuf_hvs_2eproto
{


namespace
{

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) =
{
    {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) =
{
    ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) =
{
    { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
    { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
    { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
    { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) =
{
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Terminal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Terminal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Terminal, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Terminal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Terminal, tstatus_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalArray, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalArray, terminal_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, saperatenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, pollingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, ispolling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPolling, terminalid_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, _oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    offsetof(WrapperMessageDefaultTypeInternal, cpl_),
    offsetof(WrapperMessageDefaultTypeInternal, ta_),
    offsetof(WrapperMessageDefaultTypeInternal, tml_),
    offsetof(WrapperMessageDefaultTypeInternal, debugstatus_),
    offsetof(WrapperMessageDefaultTypeInternal, packetgrepperstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) =
{
    { 0, -1, sizeof(Terminal)},
    { 9, -1, sizeof(TerminalArray)},
    { 15, -1, sizeof(ChannelPolling)},
    { 28, -1, sizeof(WrapperMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] =
{
    reinterpret_cast<const ::google::protobuf::Message*>(&_Terminal_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TerminalArray_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelPolling_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_WrapperMessage_default_instance_),
};

namespace
{

void protobuf_AssignDescriptors()
{
    AddDescriptors();
    ::google::protobuf::MessageFactory* factory = NULL;
    AssignDescriptors(
        "hvs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
        file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce()
{
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&)
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::internal::InitProtobufDefaults();
    _Terminal_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(
        &_Terminal_default_instance_);
    _TerminalArray_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(
        &_TerminalArray_default_instance_);
    _ChannelPolling_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(
        &_ChannelPolling_default_instance_);
    _WrapperMessage_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(
        &_WrapperMessage_default_instance_);
    _WrapperMessage_default_instance_.cpl_ = const_cast< ::hvs::ChannelPolling*>(
                ::hvs::ChannelPolling::internal_default_instance());
    _WrapperMessage_default_instance_.ta_ = const_cast< ::hvs::TerminalArray*>(
            ::hvs::TerminalArray::internal_default_instance());
    _WrapperMessage_default_instance_.tml_ = const_cast< ::hvs::Terminal*>(
                ::hvs::Terminal::internal_default_instance());
    _WrapperMessage_default_instance_.debugstatus_ = GOOGLE_LONGLONG(0);
    _WrapperMessage_default_instance_.packetgrepperstatus_ = GOOGLE_LONGLONG(0);
}

void InitDefaults()
{
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace
{
void AddDescriptorsImpl()
{
    InitDefaults();
    static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) =
    {
        "\n\thvs.proto\022\003hvs\"A\n\010Terminal\022\n\n\002id\030\001 \001(\005"
        "\022\n\n\002ip\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\017\n\007tstatus\030\004 "
        "\001(\010\"0\n\rTerminalArray\022\037\n\010terminal\030\001 \003(\0132\r"
        ".hvs.Terminal\"\236\001\n\016ChannelPolling\022\n\n\002id\030\001"
        " \001(\005\022\026\n\016saperateNumber\030\002 \001(\005\022\r\n\005style\030\003 "
        "\001(\005\022\023\n\013pollingTime\030\004 \001(\005\022\016\n\006active\030\005 \001(\010"
        "\022\r\n\005inuse\030\006 \001(\010\022\021\n\tisPolling\030\007 \001(\010\022\022\n\nte"
        "rminalID\030\010 \003(\t\"\261\001\n\016WrapperMessage\022\"\n\003cpl"
        "\030\003 \001(\0132\023.hvs.ChannelPollingH\000\022 \n\002ta\030\004 \001("
        "\0132\022.hvs.TerminalArrayH\000\022\034\n\003tml\030\005 \001(\0132\r.h"
        "vs.TerminalH\000\022\025\n\013debugStatus\030\006 \001(\003H\000\022\035\n\023"
        "packetGrepperStatus\030\007 \001(\003H\000B\005\n\003msgb\006prot"
        "o3"
    };
    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
        descriptor, 482);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
        "hvs.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors()
{
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer
{
    StaticDescriptorInitializer()
    {
        AddDescriptors();
    }
} static_descriptor_initializer;

}  // namespace protobuf_hvs_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Terminal::kIdFieldNumber;
const int Terminal::kIpFieldNumber;
const int Terminal::kNameFieldNumber;
const int Terminal::kTstatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Terminal::Terminal()
    : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance()))
    {
        protobuf_hvs_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:hvs.Terminal)
}
Terminal::Terminal(const Terminal& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.ip().size() > 0)
    {
        ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.name().size() > 0)
    {
        name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    ::memcpy(&id_, &from.id_,
             static_cast<size_t>(reinterpret_cast<char*>(&tstatus_) -
                                 reinterpret_cast<char*>(&id_)) + sizeof(tstatus_));
    // @@protoc_insertion_point(copy_constructor:hvs.Terminal)
}

void Terminal::SharedCtor()
{
    ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_, 0, static_cast<size_t>(
                 reinterpret_cast<char*>(&tstatus_) -
                 reinterpret_cast<char*>(&id_)) + sizeof(tstatus_));
    _cached_size_ = 0;
}

Terminal::~Terminal()
{
    // @@protoc_insertion_point(destructor:hvs.Terminal)
    SharedDtor();
}

void Terminal::SharedDtor()
{
    ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Terminal::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Terminal::descriptor()
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Terminal& Terminal::default_instance()
{
    protobuf_hvs_2eproto::InitDefaults();
    return *internal_default_instance();
}

Terminal* Terminal::New(::google::protobuf::Arena* arena) const
{
    Terminal* n = new Terminal;
    if (arena != NULL)
    {
        arena->Own(n);
    }
    return n;
}

void Terminal::Clear()
{
// @@protoc_insertion_point(message_clear_start:hvs.Terminal)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_, 0, static_cast<size_t>(
                 reinterpret_cast<char*>(&tstatus_) -
                 reinterpret_cast<char*>(&id_)) + sizeof(tstatus_));
    _internal_metadata_.Clear();
}

bool Terminal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:hvs.Terminal)
    for (;;)
    {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // int32 id = 1;
        case 1:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &id_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // string ip = 2;
        case 2:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_ip()));
                DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->ip().data(), static_cast<int>(this->ip().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "hvs.Terminal.ip"));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // string name = 3;
        case 3:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_name()));
                DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->name().data(), static_cast<int>(this->name().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "hvs.Terminal.name"));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // bool tstatus = 4;
        case 4:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                         input, &tstatus_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:hvs.Terminal)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:hvs.Terminal)
    return false;
#undef DO_
}

void Terminal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:hvs.Terminal)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 id = 1;
    if (this->id() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
    }

    // string ip = 2;
    if (this->ip().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "hvs.Terminal.ip");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->ip(), output);
    }

    // string name = 3;
    if (this->name().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "hvs.Terminal.name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->name(), output);
    }

    // bool tstatus = 4;
    if (this->tstatus() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tstatus(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
    }
    // @@protoc_insertion_point(serialize_end:hvs.Terminal)
}

::google::protobuf::uint8* Terminal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const
{
    (void)deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:hvs.Terminal)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 id = 1;
    if (this->id() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
    }

    // string ip = 2;
    if (this->ip().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "hvs.Terminal.ip");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                2, this->ip(), target);
    }

    // string name = 3;
    if (this->name().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "hvs.Terminal.name");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                3, this->name(), target);
    }

    // bool tstatus = 4;
    if (this->tstatus() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->tstatus(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:hvs.Terminal)
    return target;
}

size_t Terminal::ByteSizeLong() const
{
// @@protoc_insertion_point(message_byte_size_start:hvs.Terminal)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
    }
    // string ip = 2;
    if (this->ip().size() > 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->ip());
    }

    // string name = 3;
    if (this->name().size() > 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->name());
    }

    // int32 id = 1;
    if (this->id() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->id());
    }

    // bool tstatus = 4;
    if (this->tstatus() != 0)
    {
        total_size += 1 + 1;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Terminal::MergeFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_merge_from_start:hvs.Terminal)
    GOOGLE_DCHECK_NE(&from, this);
    const Terminal* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const Terminal>(
            &from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:hvs.Terminal)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:hvs.Terminal)
        MergeFrom(*source);
    }
}

void Terminal::MergeFrom(const Terminal& from)
{
// @@protoc_insertion_point(class_specific_merge_from_start:hvs.Terminal)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.ip().size() > 0)
    {

        ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.name().size() > 0)
    {

        name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.id() != 0)
    {
        set_id(from.id());
    }
    if (from.tstatus() != 0)
    {
        set_tstatus(from.tstatus());
    }
}

void Terminal::CopyFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_copy_from_start:hvs.Terminal)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Terminal::CopyFrom(const Terminal& from)
{
// @@protoc_insertion_point(class_specific_copy_from_start:hvs.Terminal)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Terminal::IsInitialized() const
{
    return true;
}

void Terminal::Swap(Terminal* other)
{
    if (other == this) return;
    InternalSwap(other);
}
void Terminal::InternalSwap(Terminal* other)
{
    using std::swap;
    ip_.Swap(&other->ip_);
    name_.Swap(&other->name_);
    swap(id_, other->id_);
    swap(tstatus_, other->tstatus_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Terminal::GetMetadata() const
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Terminal

// int32 id = 1;
void Terminal::clear_id()
{
    id_ = 0;
}
::google::protobuf::int32 Terminal::id() const
{
    // @@protoc_insertion_point(field_get:hvs.Terminal.id)
    return id_;
}
void Terminal::set_id(::google::protobuf::int32 value)
{

    id_ = value;
    // @@protoc_insertion_point(field_set:hvs.Terminal.id)
}

// string ip = 2;
void Terminal::clear_ip()
{
    ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Terminal::ip() const
{
    // @@protoc_insertion_point(field_get:hvs.Terminal.ip)
    return ip_.GetNoArena();
}
void Terminal::set_ip(const ::std::string& value)
{

    ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:hvs.Terminal.ip)
}
#if LANG_CXX11
void Terminal::set_ip(::std::string&& value)
{

    ip_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:hvs.Terminal.ip)
}
#endif
void Terminal::set_ip(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:hvs.Terminal.ip)
}
void Terminal::set_ip(const char* value, size_t size)
{

    ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:hvs.Terminal.ip)
}
::std::string* Terminal::mutable_ip()
{

    // @@protoc_insertion_point(field_mutable:hvs.Terminal.ip)
    return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Terminal::release_ip()
{
    // @@protoc_insertion_point(field_release:hvs.Terminal.ip)

    return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Terminal::set_allocated_ip(::std::string* ip)
{
    if (ip != NULL)
    {

    }
    else
    {

    }
    ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
    // @@protoc_insertion_point(field_set_allocated:hvs.Terminal.ip)
}

// string name = 3;
void Terminal::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Terminal::name() const
{
    // @@protoc_insertion_point(field_get:hvs.Terminal.name)
    return name_.GetNoArena();
}
void Terminal::set_name(const ::std::string& value)
{

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:hvs.Terminal.name)
}
#if LANG_CXX11
void Terminal::set_name(::std::string&& value)
{

    name_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:hvs.Terminal.name)
}
#endif
void Terminal::set_name(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:hvs.Terminal.name)
}
void Terminal::set_name(const char* value, size_t size)
{

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:hvs.Terminal.name)
}
::std::string* Terminal::mutable_name()
{

    // @@protoc_insertion_point(field_mutable:hvs.Terminal.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Terminal::release_name()
{
    // @@protoc_insertion_point(field_release:hvs.Terminal.name)

    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Terminal::set_allocated_name(::std::string* name)
{
    if (name != NULL)
    {

    }
    else
    {

    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:hvs.Terminal.name)
}

// bool tstatus = 4;
void Terminal::clear_tstatus()
{
    tstatus_ = false;
}
bool Terminal::tstatus() const
{
    // @@protoc_insertion_point(field_get:hvs.Terminal.tstatus)
    return tstatus_;
}
void Terminal::set_tstatus(bool value)
{

    tstatus_ = value;
    // @@protoc_insertion_point(field_set:hvs.Terminal.tstatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TerminalArray::kTerminalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TerminalArray::TerminalArray()
    : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance()))
    {
        protobuf_hvs_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:hvs.TerminalArray)
}
TerminalArray::TerminalArray(const TerminalArray& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      terminal_(from.terminal_),
      _cached_size_(0)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:hvs.TerminalArray)
}

void TerminalArray::SharedCtor()
{
    _cached_size_ = 0;
}

TerminalArray::~TerminalArray()
{
    // @@protoc_insertion_point(destructor:hvs.TerminalArray)
    SharedDtor();
}

void TerminalArray::SharedDtor()
{
}

void TerminalArray::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminalArray::descriptor()
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TerminalArray& TerminalArray::default_instance()
{
    protobuf_hvs_2eproto::InitDefaults();
    return *internal_default_instance();
}

TerminalArray* TerminalArray::New(::google::protobuf::Arena* arena) const
{
    TerminalArray* n = new TerminalArray;
    if (arena != NULL)
    {
        arena->Own(n);
    }
    return n;
}

void TerminalArray::Clear()
{
// @@protoc_insertion_point(message_clear_start:hvs.TerminalArray)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    terminal_.Clear();
    _internal_metadata_.Clear();
}

bool TerminalArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:hvs.TerminalArray)
    for (;;)
    {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // repeated .hvs.Terminal terminal = 1;
        case 1:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, add_terminal()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:hvs.TerminalArray)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:hvs.TerminalArray)
    return false;
#undef DO_
}

void TerminalArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:hvs.TerminalArray)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // repeated .hvs.Terminal terminal = 1;
    for (unsigned int i = 0,
            n = static_cast<unsigned int>(this->terminal_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, this->terminal(static_cast<int>(i)), output);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
    }
    // @@protoc_insertion_point(serialize_end:hvs.TerminalArray)
}

::google::protobuf::uint8* TerminalArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const
{
    (void)deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:hvs.TerminalArray)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // repeated .hvs.Terminal terminal = 1;
    for (unsigned int i = 0,
            n = static_cast<unsigned int>(this->terminal_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::
                 InternalWriteMessageNoVirtualToArray(
                     1, this->terminal(static_cast<int>(i)), deterministic, target);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:hvs.TerminalArray)
    return target;
}

size_t TerminalArray::ByteSizeLong() const
{
// @@protoc_insertion_point(message_byte_size_start:hvs.TerminalArray)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
    }
    // repeated .hvs.Terminal terminal = 1;
    {
        unsigned int count = static_cast<unsigned int>(this->terminal_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                    this->terminal(static_cast<int>(i)));
        }
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TerminalArray::MergeFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_merge_from_start:hvs.TerminalArray)
    GOOGLE_DCHECK_NE(&from, this);
    const TerminalArray* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TerminalArray>(
            &from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:hvs.TerminalArray)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:hvs.TerminalArray)
        MergeFrom(*source);
    }
}

void TerminalArray::MergeFrom(const TerminalArray& from)
{
// @@protoc_insertion_point(class_specific_merge_from_start:hvs.TerminalArray)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    terminal_.MergeFrom(from.terminal_);
}

void TerminalArray::CopyFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_copy_from_start:hvs.TerminalArray)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TerminalArray::CopyFrom(const TerminalArray& from)
{
// @@protoc_insertion_point(class_specific_copy_from_start:hvs.TerminalArray)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TerminalArray::IsInitialized() const
{
    return true;
}

void TerminalArray::Swap(TerminalArray* other)
{
    if (other == this) return;
    InternalSwap(other);
}
void TerminalArray::InternalSwap(TerminalArray* other)
{
    using std::swap;
    terminal_.InternalSwap(&other->terminal_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TerminalArray::GetMetadata() const
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TerminalArray

// repeated .hvs.Terminal terminal = 1;
int TerminalArray::terminal_size() const
{
    return terminal_.size();
}
void TerminalArray::clear_terminal()
{
    terminal_.Clear();
}
const ::hvs::Terminal& TerminalArray::terminal(int index) const
{
    // @@protoc_insertion_point(field_get:hvs.TerminalArray.terminal)
    return terminal_.Get(index);
}
::hvs::Terminal* TerminalArray::mutable_terminal(int index)
{
    // @@protoc_insertion_point(field_mutable:hvs.TerminalArray.terminal)
    return terminal_.Mutable(index);
}
::hvs::Terminal* TerminalArray::add_terminal()
{
    // @@protoc_insertion_point(field_add:hvs.TerminalArray.terminal)
    return terminal_.Add();
}
::google::protobuf::RepeatedPtrField< ::hvs::Terminal >*
TerminalArray::mutable_terminal()
{
    // @@protoc_insertion_point(field_mutable_list:hvs.TerminalArray.terminal)
    return &terminal_;
}
const ::google::protobuf::RepeatedPtrField< ::hvs::Terminal >&
TerminalArray::terminal() const
{
    // @@protoc_insertion_point(field_list:hvs.TerminalArray.terminal)
    return terminal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelPolling::kIdFieldNumber;
const int ChannelPolling::kSaperateNumberFieldNumber;
const int ChannelPolling::kStyleFieldNumber;
const int ChannelPolling::kPollingTimeFieldNumber;
const int ChannelPolling::kActiveFieldNumber;
const int ChannelPolling::kInuseFieldNumber;
const int ChannelPolling::kIsPollingFieldNumber;
const int ChannelPolling::kTerminalIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelPolling::ChannelPolling()
    : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance()))
    {
        protobuf_hvs_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:hvs.ChannelPolling)
}
ChannelPolling::ChannelPolling(const ChannelPolling& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      terminalid_(from.terminalid_),
      _cached_size_(0)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             static_cast<size_t>(reinterpret_cast<char*>(&ispolling_) -
                                 reinterpret_cast<char*>(&id_)) + sizeof(ispolling_));
    // @@protoc_insertion_point(copy_constructor:hvs.ChannelPolling)
}

void ChannelPolling::SharedCtor()
{
    ::memset(&id_, 0, static_cast<size_t>(
                 reinterpret_cast<char*>(&ispolling_) -
                 reinterpret_cast<char*>(&id_)) + sizeof(ispolling_));
    _cached_size_ = 0;
}

ChannelPolling::~ChannelPolling()
{
    // @@protoc_insertion_point(destructor:hvs.ChannelPolling)
    SharedDtor();
}

void ChannelPolling::SharedDtor()
{
}

void ChannelPolling::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelPolling::descriptor()
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelPolling& ChannelPolling::default_instance()
{
    protobuf_hvs_2eproto::InitDefaults();
    return *internal_default_instance();
}

ChannelPolling* ChannelPolling::New(::google::protobuf::Arena* arena) const
{
    ChannelPolling* n = new ChannelPolling;
    if (arena != NULL)
    {
        arena->Own(n);
    }
    return n;
}

void ChannelPolling::Clear()
{
// @@protoc_insertion_point(message_clear_start:hvs.ChannelPolling)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    terminalid_.Clear();
    ::memset(&id_, 0, static_cast<size_t>(
                 reinterpret_cast<char*>(&ispolling_) -
                 reinterpret_cast<char*>(&id_)) + sizeof(ispolling_));
    _internal_metadata_.Clear();
}

bool ChannelPolling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:hvs.ChannelPolling)
    for (;;)
    {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // int32 id = 1;
        case 1:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &id_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // int32 saperateNumber = 2;
        case 2:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &saperatenumber_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // int32 style = 3;
        case 3:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &style_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // int32 pollingTime = 4;
        case 4:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &pollingtime_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // bool active = 5;
        case 5:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                         input, &active_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // bool inuse = 6;
        case 6:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                         input, &inuse_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // bool isPolling = 7;
        case 7:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */))
            {

                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                         input, &ispolling_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated string terminalID = 8;
        case 8:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->add_terminalid()));
                DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->terminalid(this->terminalid_size() - 1).data(),
                        static_cast<int>(this->terminalid(this->terminalid_size() - 1).length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "hvs.ChannelPolling.terminalID"));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:hvs.ChannelPolling)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:hvs.ChannelPolling)
    return false;
#undef DO_
}

void ChannelPolling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:hvs.ChannelPolling)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 id = 1;
    if (this->id() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
    }

    // int32 saperateNumber = 2;
    if (this->saperatenumber() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->saperatenumber(), output);
    }

    // int32 style = 3;
    if (this->style() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->style(), output);
    }

    // int32 pollingTime = 4;
    if (this->pollingtime() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pollingtime(), output);
    }

    // bool active = 5;
    if (this->active() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
    }

    // bool inuse = 6;
    if (this->inuse() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->inuse(), output);
    }

    // bool isPolling = 7;
    if (this->ispolling() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ispolling(), output);
    }

    // repeated string terminalID = 8;
    for (int i = 0, n = this->terminalid_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->terminalid(i).data(), static_cast<int>(this->terminalid(i).length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "hvs.ChannelPolling.terminalID");
        ::google::protobuf::internal::WireFormatLite::WriteString(
            8, this->terminalid(i), output);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
    }
    // @@protoc_insertion_point(serialize_end:hvs.ChannelPolling)
}

::google::protobuf::uint8* ChannelPolling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const
{
    (void)deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:hvs.ChannelPolling)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 id = 1;
    if (this->id() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
    }

    // int32 saperateNumber = 2;
    if (this->saperatenumber() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->saperatenumber(), target);
    }

    // int32 style = 3;
    if (this->style() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->style(), target);
    }

    // int32 pollingTime = 4;
    if (this->pollingtime() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pollingtime(), target);
    }

    // bool active = 5;
    if (this->active() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
    }

    // bool inuse = 6;
    if (this->inuse() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->inuse(), target);
    }

    // bool isPolling = 7;
    if (this->ispolling() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ispolling(), target);
    }

    // repeated string terminalID = 8;
    for (int i = 0, n = this->terminalid_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->terminalid(i).data(), static_cast<int>(this->terminalid(i).length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "hvs.ChannelPolling.terminalID");
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteStringToArray(8, this->terminalid(i), target);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:hvs.ChannelPolling)
    return target;
}

size_t ChannelPolling::ByteSizeLong() const
{
// @@protoc_insertion_point(message_byte_size_start:hvs.ChannelPolling)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
    }
    // repeated string terminalID = 8;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->terminalid_size());
    for (int i = 0, n = this->terminalid_size(); i < n; i++)
    {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->terminalid(i));
    }

    // int32 id = 1;
    if (this->id() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->id());
    }

    // int32 saperateNumber = 2;
    if (this->saperatenumber() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->saperatenumber());
    }

    // int32 style = 3;
    if (this->style() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->style());
    }

    // int32 pollingTime = 4;
    if (this->pollingtime() != 0)
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->pollingtime());
    }

    // bool active = 5;
    if (this->active() != 0)
    {
        total_size += 1 + 1;
    }

    // bool inuse = 6;
    if (this->inuse() != 0)
    {
        total_size += 1 + 1;
    }

    // bool isPolling = 7;
    if (this->ispolling() != 0)
    {
        total_size += 1 + 1;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ChannelPolling::MergeFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_merge_from_start:hvs.ChannelPolling)
    GOOGLE_DCHECK_NE(&from, this);
    const ChannelPolling* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const ChannelPolling>(
            &from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:hvs.ChannelPolling)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:hvs.ChannelPolling)
        MergeFrom(*source);
    }
}

void ChannelPolling::MergeFrom(const ChannelPolling& from)
{
// @@protoc_insertion_point(class_specific_merge_from_start:hvs.ChannelPolling)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    terminalid_.MergeFrom(from.terminalid_);
    if (from.id() != 0)
    {
        set_id(from.id());
    }
    if (from.saperatenumber() != 0)
    {
        set_saperatenumber(from.saperatenumber());
    }
    if (from.style() != 0)
    {
        set_style(from.style());
    }
    if (from.pollingtime() != 0)
    {
        set_pollingtime(from.pollingtime());
    }
    if (from.active() != 0)
    {
        set_active(from.active());
    }
    if (from.inuse() != 0)
    {
        set_inuse(from.inuse());
    }
    if (from.ispolling() != 0)
    {
        set_ispolling(from.ispolling());
    }
}

void ChannelPolling::CopyFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_copy_from_start:hvs.ChannelPolling)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void ChannelPolling::CopyFrom(const ChannelPolling& from)
{
// @@protoc_insertion_point(class_specific_copy_from_start:hvs.ChannelPolling)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ChannelPolling::IsInitialized() const
{
    return true;
}

void ChannelPolling::Swap(ChannelPolling* other)
{
    if (other == this) return;
    InternalSwap(other);
}
void ChannelPolling::InternalSwap(ChannelPolling* other)
{
    using std::swap;
    terminalid_.InternalSwap(&other->terminalid_);
    swap(id_, other->id_);
    swap(saperatenumber_, other->saperatenumber_);
    swap(style_, other->style_);
    swap(pollingtime_, other->pollingtime_);
    swap(active_, other->active_);
    swap(inuse_, other->inuse_);
    swap(ispolling_, other->ispolling_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelPolling::GetMetadata() const
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelPolling

// int32 id = 1;
void ChannelPolling::clear_id()
{
    id_ = 0;
}
::google::protobuf::int32 ChannelPolling::id() const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.id)
    return id_;
}
void ChannelPolling::set_id(::google::protobuf::int32 value)
{

    id_ = value;
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.id)
}

// int32 saperateNumber = 2;
void ChannelPolling::clear_saperatenumber()
{
    saperatenumber_ = 0;
}
::google::protobuf::int32 ChannelPolling::saperatenumber() const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.saperateNumber)
    return saperatenumber_;
}
void ChannelPolling::set_saperatenumber(::google::protobuf::int32 value)
{

    saperatenumber_ = value;
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.saperateNumber)
}

// int32 style = 3;
void ChannelPolling::clear_style()
{
    style_ = 0;
}
::google::protobuf::int32 ChannelPolling::style() const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.style)
    return style_;
}
void ChannelPolling::set_style(::google::protobuf::int32 value)
{

    style_ = value;
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.style)
}

// int32 pollingTime = 4;
void ChannelPolling::clear_pollingtime()
{
    pollingtime_ = 0;
}
::google::protobuf::int32 ChannelPolling::pollingtime() const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.pollingTime)
    return pollingtime_;
}
void ChannelPolling::set_pollingtime(::google::protobuf::int32 value)
{

    pollingtime_ = value;
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.pollingTime)
}

// bool active = 5;
void ChannelPolling::clear_active()
{
    active_ = false;
}
bool ChannelPolling::active() const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.active)
    return active_;
}
void ChannelPolling::set_active(bool value)
{

    active_ = value;
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.active)
}

// bool inuse = 6;
void ChannelPolling::clear_inuse()
{
    inuse_ = false;
}
bool ChannelPolling::inuse() const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.inuse)
    return inuse_;
}
void ChannelPolling::set_inuse(bool value)
{

    inuse_ = value;
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.inuse)
}

// bool isPolling = 7;
void ChannelPolling::clear_ispolling()
{
    ispolling_ = false;
}
bool ChannelPolling::ispolling() const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.isPolling)
    return ispolling_;
}
void ChannelPolling::set_ispolling(bool value)
{

    ispolling_ = value;
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.isPolling)
}

// repeated string terminalID = 8;
int ChannelPolling::terminalid_size() const
{
    return terminalid_.size();
}
void ChannelPolling::clear_terminalid()
{
    terminalid_.Clear();
}
const ::std::string& ChannelPolling::terminalid(int index) const
{
    // @@protoc_insertion_point(field_get:hvs.ChannelPolling.terminalID)
    return terminalid_.Get(index);
}
::std::string* ChannelPolling::mutable_terminalid(int index)
{
    // @@protoc_insertion_point(field_mutable:hvs.ChannelPolling.terminalID)
    return terminalid_.Mutable(index);
}
void ChannelPolling::set_terminalid(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.terminalID)
    terminalid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ChannelPolling::set_terminalid(int index, ::std::string&& value)
{
    // @@protoc_insertion_point(field_set:hvs.ChannelPolling.terminalID)
    terminalid_.Mutable(index)->assign(std::move(value));
}
#endif
void ChannelPolling::set_terminalid(int index, const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    terminalid_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:hvs.ChannelPolling.terminalID)
}
void ChannelPolling::set_terminalid(int index, const char* value, size_t size)
{
    terminalid_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:hvs.ChannelPolling.terminalID)
}
::std::string* ChannelPolling::add_terminalid()
{
    // @@protoc_insertion_point(field_add_mutable:hvs.ChannelPolling.terminalID)
    return terminalid_.Add();
}
void ChannelPolling::add_terminalid(const ::std::string& value)
{
    terminalid_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:hvs.ChannelPolling.terminalID)
}
#if LANG_CXX11
void ChannelPolling::add_terminalid(::std::string&& value)
{
    terminalid_.Add(std::move(value));
    // @@protoc_insertion_point(field_add:hvs.ChannelPolling.terminalID)
}
#endif
void ChannelPolling::add_terminalid(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    terminalid_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:hvs.ChannelPolling.terminalID)
}
void ChannelPolling::add_terminalid(const char* value, size_t size)
{
    terminalid_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:hvs.ChannelPolling.terminalID)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChannelPolling::terminalid() const
{
    // @@protoc_insertion_point(field_list:hvs.ChannelPolling.terminalID)
    return terminalid_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ChannelPolling::mutable_terminalid()
{
    // @@protoc_insertion_point(field_mutable_list:hvs.ChannelPolling.terminalID)
    return &terminalid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WrapperMessage::kCplFieldNumber;
const int WrapperMessage::kTaFieldNumber;
const int WrapperMessage::kTmlFieldNumber;
const int WrapperMessage::kDebugStatusFieldNumber;
const int WrapperMessage::kPacketGrepperStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WrapperMessage::WrapperMessage()
    : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance()))
    {
        protobuf_hvs_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:hvs.WrapperMessage)
}
WrapperMessage::WrapperMessage(const WrapperMessage& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    clear_has_msg();
    switch (from.msg_case())
    {
    case kCpl:
    {
        mutable_cpl()->::hvs::ChannelPolling::MergeFrom(from.cpl());
        break;
    }
    case kTa:
    {
        mutable_ta()->::hvs::TerminalArray::MergeFrom(from.ta());
        break;
    }
    case kTml:
    {
        mutable_tml()->::hvs::Terminal::MergeFrom(from.tml());
        break;
    }
    case kDebugStatus:
    {
        set_debugstatus(from.debugstatus());
        break;
    }
    case kPacketGrepperStatus:
    {
        set_packetgrepperstatus(from.packetgrepperstatus());
        break;
    }
    case MSG_NOT_SET:
    {
        break;
    }
    }
    // @@protoc_insertion_point(copy_constructor:hvs.WrapperMessage)
}

void WrapperMessage::SharedCtor()
{
    clear_has_msg();
    _cached_size_ = 0;
}

WrapperMessage::~WrapperMessage()
{
    // @@protoc_insertion_point(destructor:hvs.WrapperMessage)
    SharedDtor();
}

void WrapperMessage::SharedDtor()
{
    if (has_msg())
    {
        clear_msg();
    }
}

void WrapperMessage::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WrapperMessage::descriptor()
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WrapperMessage& WrapperMessage::default_instance()
{
    protobuf_hvs_2eproto::InitDefaults();
    return *internal_default_instance();
}

WrapperMessage* WrapperMessage::New(::google::protobuf::Arena* arena) const
{
    WrapperMessage* n = new WrapperMessage;
    if (arena != NULL)
    {
        arena->Own(n);
    }
    return n;
}

void WrapperMessage::clear_msg()
{
// @@protoc_insertion_point(one_of_clear_start:hvs.WrapperMessage)
    switch (msg_case())
    {
    case kCpl:
    {
        delete msg_.cpl_;
        break;
    }
    case kTa:
    {
        delete msg_.ta_;
        break;
    }
    case kTml:
    {
        delete msg_.tml_;
        break;
    }
    case kDebugStatus:
    {
        // No need to clear
        break;
    }
    case kPacketGrepperStatus:
    {
        // No need to clear
        break;
    }
    case MSG_NOT_SET:
    {
        break;
    }
    }
    _oneof_case_[0] = MSG_NOT_SET;
}


void WrapperMessage::Clear()
{
// @@protoc_insertion_point(message_clear_start:hvs.WrapperMessage)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    clear_msg();
    _internal_metadata_.Clear();
}

bool WrapperMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:hvs.WrapperMessage)
    for (;;)
    {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // .hvs.ChannelPolling cpl = 3;
        case 3:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_cpl()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .hvs.TerminalArray ta = 4;
        case 4:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_ta()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // .hvs.Terminal tml = 5;
        case 5:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_tml()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // int64 debugStatus = 6;
        case 6:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */))
            {
                clear_msg();
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                         input, &msg_.debugstatus_)));
                set_has_debugstatus();
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // int64 packetGrepperStatus = 7;
        case 7:
        {
            if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */))
            {
                clear_msg();
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                         input, &msg_.packetgrepperstatus_)));
                set_has_packetgrepperstatus();
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:hvs.WrapperMessage)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:hvs.WrapperMessage)
    return false;
#undef DO_
}

void WrapperMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:hvs.WrapperMessage)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // .hvs.ChannelPolling cpl = 3;
    if (has_cpl())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *msg_.cpl_, output);
    }

    // .hvs.TerminalArray ta = 4;
    if (has_ta())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *msg_.ta_, output);
    }

    // .hvs.Terminal tml = 5;
    if (has_tml())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *msg_.tml_, output);
    }

    // int64 debugStatus = 6;
    if (has_debugstatus())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->debugstatus(), output);
    }

    // int64 packetGrepperStatus = 7;
    if (has_packetgrepperstatus())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->packetgrepperstatus(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
    }
    // @@protoc_insertion_point(serialize_end:hvs.WrapperMessage)
}

::google::protobuf::uint8* WrapperMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const
{
    (void)deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:hvs.WrapperMessage)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // .hvs.ChannelPolling cpl = 3;
    if (has_cpl())
    {
        target = ::google::protobuf::internal::WireFormatLite::
                 InternalWriteMessageNoVirtualToArray(
                     3, *msg_.cpl_, deterministic, target);
    }

    // .hvs.TerminalArray ta = 4;
    if (has_ta())
    {
        target = ::google::protobuf::internal::WireFormatLite::
                 InternalWriteMessageNoVirtualToArray(
                     4, *msg_.ta_, deterministic, target);
    }

    // .hvs.Terminal tml = 5;
    if (has_tml())
    {
        target = ::google::protobuf::internal::WireFormatLite::
                 InternalWriteMessageNoVirtualToArray(
                     5, *msg_.tml_, deterministic, target);
    }

    // int64 debugStatus = 6;
    if (has_debugstatus())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->debugstatus(), target);
    }

    // int64 packetGrepperStatus = 7;
    if (has_packetgrepperstatus())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->packetgrepperstatus(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:hvs.WrapperMessage)
    return target;
}

size_t WrapperMessage::ByteSizeLong() const
{
// @@protoc_insertion_point(message_byte_size_start:hvs.WrapperMessage)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
    }
    switch (msg_case())
    {
    // .hvs.ChannelPolling cpl = 3;
    case kCpl:
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                          *msg_.cpl_);
        break;
    }
    // .hvs.TerminalArray ta = 4;
    case kTa:
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                          *msg_.ta_);
        break;
    }
    // .hvs.Terminal tml = 5;
    case kTml:
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                          *msg_.tml_);
        break;
    }
    // int64 debugStatus = 6;
    case kDebugStatus:
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->debugstatus());
        break;
    }
    // int64 packetGrepperStatus = 7;
    case kPacketGrepperStatus:
    {
        total_size += 1 +
                      ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->packetgrepperstatus());
        break;
    }
    case MSG_NOT_SET:
    {
        break;
    }
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void WrapperMessage::MergeFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_merge_from_start:hvs.WrapperMessage)
    GOOGLE_DCHECK_NE(&from, this);
    const WrapperMessage* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const WrapperMessage>(
            &from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:hvs.WrapperMessage)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:hvs.WrapperMessage)
        MergeFrom(*source);
    }
}

void WrapperMessage::MergeFrom(const WrapperMessage& from)
{
// @@protoc_insertion_point(class_specific_merge_from_start:hvs.WrapperMessage)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    switch (from.msg_case())
    {
    case kCpl:
    {
        mutable_cpl()->::hvs::ChannelPolling::MergeFrom(from.cpl());
        break;
    }
    case kTa:
    {
        mutable_ta()->::hvs::TerminalArray::MergeFrom(from.ta());
        break;
    }
    case kTml:
    {
        mutable_tml()->::hvs::Terminal::MergeFrom(from.tml());
        break;
    }
    case kDebugStatus:
    {
        set_debugstatus(from.debugstatus());
        break;
    }
    case kPacketGrepperStatus:
    {
        set_packetgrepperstatus(from.packetgrepperstatus());
        break;
    }
    case MSG_NOT_SET:
    {
        break;
    }
    }
}

void WrapperMessage::CopyFrom(const ::google::protobuf::Message& from)
{
// @@protoc_insertion_point(generalized_copy_from_start:hvs.WrapperMessage)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void WrapperMessage::CopyFrom(const WrapperMessage& from)
{
// @@protoc_insertion_point(class_specific_copy_from_start:hvs.WrapperMessage)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool WrapperMessage::IsInitialized() const
{
    return true;
}

void WrapperMessage::Swap(WrapperMessage* other)
{
    if (other == this) return;
    InternalSwap(other);
}
void WrapperMessage::InternalSwap(WrapperMessage* other)
{
    using std::swap;
    swap(msg_, other->msg_);
    swap(_oneof_case_[0], other->_oneof_case_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WrapperMessage::GetMetadata() const
{
    protobuf_hvs_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_hvs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WrapperMessage

// .hvs.ChannelPolling cpl = 3;
bool WrapperMessage::has_cpl() const
{
    return msg_case() == kCpl;
}
void WrapperMessage::set_has_cpl()
{
    _oneof_case_[0] = kCpl;
}
void WrapperMessage::clear_cpl()
{
    if (has_cpl())
    {
        delete msg_.cpl_;
        clear_has_msg();
    }
}
const ::hvs::ChannelPolling& WrapperMessage::cpl() const
{
    // @@protoc_insertion_point(field_get:hvs.WrapperMessage.cpl)
    return has_cpl()
           ? *msg_.cpl_
           : ::hvs::ChannelPolling::default_instance();
}
::hvs::ChannelPolling* WrapperMessage::mutable_cpl()
{
    if (!has_cpl())
    {
        clear_msg();
        set_has_cpl();
        msg_.cpl_ = new ::hvs::ChannelPolling;
    }
    // @@protoc_insertion_point(field_mutable:hvs.WrapperMessage.cpl)
    return msg_.cpl_;
}
::hvs::ChannelPolling* WrapperMessage::release_cpl()
{
    // @@protoc_insertion_point(field_release:hvs.WrapperMessage.cpl)
    if (has_cpl())
    {
        clear_has_msg();
        ::hvs::ChannelPolling* temp = msg_.cpl_;
        msg_.cpl_ = NULL;
        return temp;
    }
    else
    {
        return NULL;
    }
}
void WrapperMessage::set_allocated_cpl(::hvs::ChannelPolling* cpl)
{
    clear_msg();
    if (cpl)
    {
        set_has_cpl();
        msg_.cpl_ = cpl;
    }
    // @@protoc_insertion_point(field_set_allocated:hvs.WrapperMessage.cpl)
}

// .hvs.TerminalArray ta = 4;
bool WrapperMessage::has_ta() const
{
    return msg_case() == kTa;
}
void WrapperMessage::set_has_ta()
{
    _oneof_case_[0] = kTa;
}
void WrapperMessage::clear_ta()
{
    if (has_ta())
    {
        delete msg_.ta_;
        clear_has_msg();
    }
}
const ::hvs::TerminalArray& WrapperMessage::ta() const
{
    // @@protoc_insertion_point(field_get:hvs.WrapperMessage.ta)
    return has_ta()
           ? *msg_.ta_
           : ::hvs::TerminalArray::default_instance();
}
::hvs::TerminalArray* WrapperMessage::mutable_ta()
{
    if (!has_ta())
    {
        clear_msg();
        set_has_ta();
        msg_.ta_ = new ::hvs::TerminalArray;
    }
    // @@protoc_insertion_point(field_mutable:hvs.WrapperMessage.ta)
    return msg_.ta_;
}
::hvs::TerminalArray* WrapperMessage::release_ta()
{
    // @@protoc_insertion_point(field_release:hvs.WrapperMessage.ta)
    if (has_ta())
    {
        clear_has_msg();
        ::hvs::TerminalArray* temp = msg_.ta_;
        msg_.ta_ = NULL;
        return temp;
    }
    else
    {
        return NULL;
    }
}
void WrapperMessage::set_allocated_ta(::hvs::TerminalArray* ta)
{
    clear_msg();
    if (ta)
    {
        set_has_ta();
        msg_.ta_ = ta;
    }
    // @@protoc_insertion_point(field_set_allocated:hvs.WrapperMessage.ta)
}

// .hvs.Terminal tml = 5;
bool WrapperMessage::has_tml() const
{
    return msg_case() == kTml;
}
void WrapperMessage::set_has_tml()
{
    _oneof_case_[0] = kTml;
}
void WrapperMessage::clear_tml()
{
    if (has_tml())
    {
        delete msg_.tml_;
        clear_has_msg();
    }
}
const ::hvs::Terminal& WrapperMessage::tml() const
{
    // @@protoc_insertion_point(field_get:hvs.WrapperMessage.tml)
    return has_tml()
           ? *msg_.tml_
           : ::hvs::Terminal::default_instance();
}
::hvs::Terminal* WrapperMessage::mutable_tml()
{
    if (!has_tml())
    {
        clear_msg();
        set_has_tml();
        msg_.tml_ = new ::hvs::Terminal;
    }
    // @@protoc_insertion_point(field_mutable:hvs.WrapperMessage.tml)
    return msg_.tml_;
}
::hvs::Terminal* WrapperMessage::release_tml()
{
    // @@protoc_insertion_point(field_release:hvs.WrapperMessage.tml)
    if (has_tml())
    {
        clear_has_msg();
        ::hvs::Terminal* temp = msg_.tml_;
        msg_.tml_ = NULL;
        return temp;
    }
    else
    {
        return NULL;
    }
}
void WrapperMessage::set_allocated_tml(::hvs::Terminal* tml)
{
    clear_msg();
    if (tml)
    {
        set_has_tml();
        msg_.tml_ = tml;
    }
    // @@protoc_insertion_point(field_set_allocated:hvs.WrapperMessage.tml)
}

// int64 debugStatus = 6;
bool WrapperMessage::has_debugstatus() const
{
    return msg_case() == kDebugStatus;
}
void WrapperMessage::set_has_debugstatus()
{
    _oneof_case_[0] = kDebugStatus;
}
void WrapperMessage::clear_debugstatus()
{
    if (has_debugstatus())
    {
        msg_.debugstatus_ = GOOGLE_LONGLONG(0);
        clear_has_msg();
    }
}
::google::protobuf::int64 WrapperMessage::debugstatus() const
{
    // @@protoc_insertion_point(field_get:hvs.WrapperMessage.debugStatus)
    if (has_debugstatus())
    {
        return msg_.debugstatus_;
    }
    return GOOGLE_LONGLONG(0);
}
void WrapperMessage::set_debugstatus(::google::protobuf::int64 value)
{
    if (!has_debugstatus())
    {
        clear_msg();
        set_has_debugstatus();
    }
    msg_.debugstatus_ = value;
    // @@protoc_insertion_point(field_set:hvs.WrapperMessage.debugStatus)
}

// int64 packetGrepperStatus = 7;
bool WrapperMessage::has_packetgrepperstatus() const
{
    return msg_case() == kPacketGrepperStatus;
}
void WrapperMessage::set_has_packetgrepperstatus()
{
    _oneof_case_[0] = kPacketGrepperStatus;
}
void WrapperMessage::clear_packetgrepperstatus()
{
    if (has_packetgrepperstatus())
    {
        msg_.packetgrepperstatus_ = GOOGLE_LONGLONG(0);
        clear_has_msg();
    }
}
::google::protobuf::int64 WrapperMessage::packetgrepperstatus() const
{
    // @@protoc_insertion_point(field_get:hvs.WrapperMessage.packetGrepperStatus)
    if (has_packetgrepperstatus())
    {
        return msg_.packetgrepperstatus_;
    }
    return GOOGLE_LONGLONG(0);
}
void WrapperMessage::set_packetgrepperstatus(::google::protobuf::int64 value)
{
    if (!has_packetgrepperstatus())
    {
        clear_msg();
        set_has_packetgrepperstatus();
    }
    msg_.packetgrepperstatus_ = value;
    // @@protoc_insertion_point(field_set:hvs.WrapperMessage.packetGrepperStatus)
}

bool WrapperMessage::has_msg() const
{
    return msg_case() != MSG_NOT_SET;
}
void WrapperMessage::clear_has_msg()
{
    _oneof_case_[0] = MSG_NOT_SET;
}
WrapperMessage::MsgCase WrapperMessage::msg_case() const
{
    return WrapperMessage::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hvs

// @@protoc_insertion_point(global_scope)
